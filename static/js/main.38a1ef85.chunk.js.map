{"version":3,"sources":["components/Game.jsx","components/Selection.jsx","App.js","reportWebVitals.js","index.js"],"names":["Game","props","aiPlayer","lines","matrix","cont","i","j","x","y","content","useState","grid","setGrid","turn","setTurn","reset","setReset","winner","setWinner","surround","cell","copy","length","a","b","c","emptySquares","arr","push","filter","s","useEffect","alert","ban","players","className","map","row","col","onClick","handleReset","Selection","setPlayers","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38a1ef85.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../styles/game.css';\r\n\r\nfunction Game(props) {\r\n  const huPlayer = 'X';\r\n  const aiPlayer = '◯';\r\n  const lines = [\r\n    [\r\n      [0, 0],\r\n      [1, 1],\r\n      [2, 2],\r\n    ],\r\n    [\r\n      [0, 2],\r\n      [1, 1],\r\n      [2, 0],\r\n    ],\r\n    [\r\n      [0, 0],\r\n      [1, 0],\r\n      [2, 0],\r\n    ],\r\n    [\r\n      [0, 1],\r\n      [1, 1],\r\n      [2, 1],\r\n    ],\r\n    [\r\n      [0, 2],\r\n      [1, 2],\r\n      [2, 2],\r\n    ],\r\n    [\r\n      [0, 0],\r\n      [0, 1],\r\n      [0, 2],\r\n    ],\r\n    [\r\n      [1, 0],\r\n      [1, 1],\r\n      [1, 2],\r\n    ],\r\n    [\r\n      [2, 0],\r\n      [2, 1],\r\n      [2, 2],\r\n    ],\r\n  ];\r\n  const winCombos = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [6, 4, 2],\r\n  ];\r\n  let matrix = [];\r\n  let cont = 0;\r\n  for (var i = 0; i < 3; i++) {\r\n    matrix[i] = [];\r\n    for (var j = 0; j < 3; j++) {\r\n      matrix[i][j] = {\r\n        x: i,\r\n        y: j,\r\n        content: cont++,\r\n      };\r\n    }\r\n  }\r\n  const [grid, setGrid] = useState(matrix);\r\n  const [turn, setTurn] = useState(true);\r\n  const [reset, setReset] = useState(false);\r\n  const [winner, setWinner] = useState(0);\r\n\r\n  const handleRigthClick = (cell) => {\r\n    if (!reset && cell.content !== huPlayer && cell.content !== aiPlayer) {\r\n      setGrid(surround(cell, [...grid]));\r\n      setTurn(!turn);\r\n\r\n      /* if (props.players === 1) bestSpot();*/\r\n    }\r\n  };\r\n  const surround = (cell, copy) => {\r\n    copy[cell.x][cell.y].content = turn ? 'X' : '◯';\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        copy[a[0]][a[1]].content &&\r\n        copy[a[0]][a[1]].content === copy[b[0]][b[1]].content &&\r\n        copy[a[0]][a[1]].content === copy[c[0]][c[1]].content\r\n      ) {\r\n        setWinner(turn ? 'X' : '◯');\r\n        setReset(true);\r\n      }\r\n    }\r\n    return copy;\r\n  };\r\n\r\n  const handleReset = () => {\r\n    let matrix = [];\r\n    let cont = 0;\r\n    for (var i = 0; i < 3; i++) {\r\n      matrix[i] = [];\r\n      for (var j = 0; j < 3; j++) {\r\n        matrix[i][j] = {\r\n          x: i,\r\n          y: j,\r\n          content: cont++,\r\n        };\r\n      }\r\n    }\r\n    setGrid(matrix);\r\n    setTurn(true);\r\n    setReset(false);\r\n    setWinner(0);\r\n  };\r\n\r\n  const bestSpot = () => {\r\n    minimax(oriBoard(), aiPlayer);\r\n  };\r\n\r\n  const oriBoard = () => {\r\n    let arr = [];\r\n    for (var i = 0; i < 3; i++)\r\n      for (var j = 0; j < 3; j++) arr.push(grid[i][j].content);\r\n    return arr;\r\n  };\r\n\r\n  const emptySquares = () => {\r\n    let arr = [];\r\n    for (var i = 0; i < 3; i++)\r\n      for (var j = 0; j < 3; j++) arr.push(grid[i][j].content);\r\n    return arr.filter((s) => typeof s == 'number');\r\n  };\r\n\r\n  const checkWin = (board, player) => {\r\n    let plays = board.reduce((a, e, i) => (e === player ? a.concat(i) : a), []);\r\n    let gameWon = null;\r\n    for (let [index, win] of winCombos.entries()) {\r\n      if (win.every((elem) => plays.indexOf(elem) > -1)) {\r\n        gameWon = { index: index, player: player };\r\n        break;\r\n      }\r\n    }\r\n    if (gameWon) return gameWon.player === player;\r\n  };\r\n\r\n  const minimax = (newBoard, player) => {\r\n    var availSpots = emptySquares();\r\n    if (checkWin(newBoard, huPlayer)) {\r\n      return { score: -10 };\r\n    } else if (checkWin(newBoard, aiPlayer)) {\r\n      return { score: 10 };\r\n    } else if (availSpots.length === 0) {\r\n      return { score: 0 };\r\n    }\r\n    let moves = [];\r\n    for (let i = 0; i < availSpots.length; i++) {\r\n      let move = {};\r\n      move.index = newBoard[availSpots[i]];\r\n      newBoard[availSpots[i]] = player;\r\n\r\n      if (player === aiPlayer) {\r\n        let result = minimax(newBoard, huPlayer);\r\n        move.score = result.score;\r\n      } else {\r\n        let result = minimax(newBoard, aiPlayer);\r\n        move.score = result.score;\r\n      }\r\n\r\n      newBoard[availSpots[i]] = move.index;\r\n\r\n      moves.push(move);\r\n    }\r\n    console.log(newBoard);\r\n\r\n    /* let bestMove;\r\n    if (player === aiPlayer) {\r\n      let bestScore = -10000;\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    } else {\r\n      let bestScore = 10000;\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    }\r\n */\r\n    //return moves[bestMove];\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!reset) {\r\n      let ban = false;\r\n      if (emptySquares().length === 0) ban = true;\r\n      if (ban) {\r\n        setReset(true);\r\n        alert('It´s a tie');\r\n      }\r\n    } else if (winner !== 0) {\r\n      alert((turn ? '◯' : 'X') + ' Win');\r\n    }\r\n  }, [grid, reset, winner, turn]);\r\n\r\n  if (props.players === 1) {\r\n    return <div>En proceso</div>;\r\n  }\r\n  if (props.players === 2) {\r\n    return (\r\n      <div className='grid'>\r\n        {grid.map((row, i) => (\r\n          <div key={i}>\r\n            {row.map((col, j) => (\r\n              <div key={j} className='d-inline-flex'>\r\n                <div\r\n                  className='border border-dark'\r\n                  onClick={() => {\r\n                    handleRigthClick(col);\r\n                  }}\r\n                >\r\n                  <p\r\n                    className={\r\n                      col.content === 'X'\r\n                        ? 'eq text-center'\r\n                        : col.content === '◯'\r\n                        ? 'ou text-center'\r\n                        : 'text-center'\r\n                    }\r\n                  >\r\n                    {typeof col.content === 'number' ? '‎‎‏‏‎ ‎' : col.content}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n\r\n        {reset ? (\r\n          <button\r\n            className='btn btn-primary reset'\r\n            onClick={() => handleReset()}\r\n          >\r\n            Reset\r\n          </button>\r\n        ) : (\r\n          <h2 className='turn'>\r\n            Turn of\r\n            <span className={turn ? 'eq' : 'ou'}> {turn ? 'X' : '◯'}</span>\r\n          </h2>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport '../styles/selection.css';\r\n\r\nconst Selection = (props) => {\r\n  return (\r\n    <div className='selection container'>\r\n      <header>\r\n        <h1 className='text-center'>tic-tac-toe on React</h1>\r\n      </header>\r\n      <section>\r\n        <h3 className='text-center par'>Choose the number of players</h3>\r\n        <div className='center'>\r\n          <button\r\n            className='btn btn-primary disabled'\r\n            onClick={() => props.setPlayers(1)}\r\n          >\r\n            1\r\n          </button>\r\n          <button\r\n            className='btn btn-primary'\r\n            onClick={() => props.setPlayers(2)}\r\n          >\r\n            2\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Selection;\r\n","import React, { useState } from 'react';\nimport Game from './components/Game';\nimport Selection from './components/Selection';\n\nfunction App() {\n  const [players, setPlayers] = useState(0);\n  return (\n    <div className='container'>\n      {players === 0 ? (\n        <Selection setPlayers={setPlayers} />\n      ) : (\n        <Game players={players} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}